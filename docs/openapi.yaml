openapi: 3.1.0
info:
  title: OuterScout
  description: |-
    OuterScout API allows you to create scene recordings of the Outer Wilds

    With this API you can put multiple cameras on your scene, create keyframes to animate their parameters and transformation, and then record color and depth information to your disk
  license:
    name: MIT
    url: https://github.com/Picalines/outer-scout/blob/master/OuterScout/LICENSE
  version: 0.1.0
tags:
  - name: scene
  - name: camera
  - name: gameObject
  - name: player
  - name: keyframes
paths:
  /scene:
    post:
      operationId: createScene
      tags: [scene]
      description: |-
        Create an OuterScout scene. Scene contains cameras, custom GameObjects and other resources.
        Use this route to clear previous scene
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required: [origin, hidePlayerModel]
              properties:
                origin:
                  $ref: '#/components/schemas/Transform'
                hidePlayerModel:
                  type: boolean
      responses:
        '201':
          $ref: '#/components/responses/plainSuccess'
        '400':
          $ref: '#/components/responses/invalidBody'
        '503':
          description: Scene cannot be created at the moment
  /scene/recording:
    post:
      operationId: startRecording
      tags: [scene]
      requestBody:
        content:
          application/json:
            schema:
              required: [frameRate, startFrame, endFrame]
              additionalProperties: false
              properties:
                frameRate:
                  type: integer
                  minimum: 1
                  examples: [60]
                startFrame:
                  type: integer
                  examples: [1]
                endFrame:
                  type: integer
                  examples: [180]
      responses:
        '201':
          description: Recording has been started
        '503':
          description: Recording cannot be started at the moment
  /scene/redording/status:
    get:
      operationId: getRecordingStatus
      tags: [scene]
      responses:
        '200':
          description: Returned recording status
          content:
            application/json:
              schema:
                type: object
                properties:
                  inProgress:
                    type: boolean
                  startFrame:
                    type: integer
                    examples: [1]
                  endFrame:
                    type: integer
                    examples: [180]
                  currentFrame:
                    type: integer
                    examples: [30]
                  framesRecorded:
                    type: integer
                    examples: [29]
        '503':
          description: Recording haven't been started
  /scene/active-camera:
    get:
      operationId: getActiveCamera
      tags: [scene, camera]
      responses:
        '200':
          description: Returned active camera
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: Name of the GameObject containing current Unity camera
        '503':
          description: Active camera cannot be retrieved at the moment
  /scene/keyframes:
    put:
      operationId: setSceneKeyframes
      tags: [scene, keyframes]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SceneKeyframes'
      responses:
        '200':
          $ref: '#/components/responses/plainSuccess'
        '400':
          $ref: '#/components/responses/invalidBody'
        '503':
          description: Scene keyframes cannot be set at the moment
  /cameras:
    post:
      operationId: createCamera
      tags: [camera]
      description: Create camera on the scene
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Camera'
      responses:
        '200':
          $ref: '#/components/responses/plainSuccess'
        '400':
          $ref: '#/components/responses/invalidBody'
        '503':
          description: Camera cannot be created at the moment
  /cameras/{id}/perspective:
    put:
      operationId: setCameraPerspective
      tags: [camera]
      parameters:
        - $ref: '#/components/parameters/cameraId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CameraPerspective'
      responses:
        '200':
          $ref: '#/components/responses/plainSuccess'
        '400':
          $ref: '#/components/responses/invalidBody'
        '404':
          $ref: '#/components/responses/cameraNotFound'
        '503':
          description: Camera perspective cannot be set at the moment
  /cameras/{id}/keyframes:
    put:
      operationId: setCameraKeyframes
      tags: [camera, keyframes]
      parameters:
        - $ref: '#/components/parameters/cameraId'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/TransformKeyframes'
                - $ref: '#/components/schemas/PerspectiveKeyframes'
      responses:
        '200':
          $ref: '#/components/responses/plainSuccess'
        '400':
          $ref: '#/components/responses/invalidBody'
        '404':
          $ref: '#/components/responses/cameraNotFound'
        '503':
          description: Keyframes cannot be set at the moment
  /gameObjects:
    post:
      operationId: createGameObject
      tags: [gameObject]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required: [name, transform]
              properties:
                name:
                  type: string
                  pattern: ^[a-zA-Z_][a-zA-Z0-9_\-]*
                  examples:
                    - origin
                transform:
                  $ref: '#/components/schemas/Transform'
                  examples:
                    - parent: TimberHearth_Body
                      position: [0, 400, 0]
      responses:
        '201':
          $ref: '#/components/responses/plainSuccess'
        '400':
          $ref: '#/components/responses/invalidBody'
        '503':
          description: GameObject cannot be created at the moment
  /gameObjects/{name}/transform:
    get:
      operationId: getGameObjectTransform
      tags: [gameObject]
      parameters:
        - $ref: '#/components/parameters/gameObjectName'
        - name: parent
          in: query
          required: true
          description: A GameObject whose transform will be used as the origin
          schema:
            type: string
          example: TimberHearth_Body
      responses:
        '200':
          description: Returned gameObject transform
          content:
            application/json:
              schema:
                type: object
                properties:
                  global:
                    $ref: '#/components/schemas/Transform'
                  local:
                    $ref: '#/components/schemas/Transform'
        '400':
          description: GameObject was not found
        '503':
          description: GameObject transform cannot be retrieved at the moment
    put:
      operationId: setGameObjectTransform
      tags: [gameObject]
      parameters:
        - $ref: '#/components/parameters/gameObjectName'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transform'
              description: |-
                New GameObject transformation

                Parent will be used as the origin, but GameObject hierarchy will not be changed

                Only those components that are in the request body will be changed
      responses:
        '200':
          $ref: '#/components/responses/plainSuccess'
        '400':
          $ref: '#/components/responses/invalidBody'
        '405':
          description: PlayerCamera transform cannot be changed
        '503':
          description: GameObject transform cannot be changed at the moment
  /gameObjects/{name}/perspective:
    get:
      operationId: getUnityCameraPerspective
      tags: [gameObject, camera]
      parameters:
        - $ref: '#/components/parameters/gameObjectName'
      responses:
        '200':
          description: Returned camera perspective
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CameraPerspective'
        '400':
          description: Found camera does not use physical properties
        '404':
          $ref: '#/components/responses/cameraNotFound'
    put:
      operationId: setUnityCameraPerspective
      tags: [gameObject, camera]
      parameters:
        - $ref: '#/components/parameters/gameObjectName'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CameraPerspective'
      responses:
        '200':
          $ref: '#/components/responses/plainSuccess'
        '400':
          $ref: '#/components/responses/invalidBody'
        '404':
          $ref: '#/components/responses/cameraNotFound'
        '503':
          description: Camera perspective cannot be set at the moment
  /gameObjects/{name}/keyframes:
    put:
      operationId: setGameObjectKeyframes
      tags: [gameObject, keyframes]
      parameters:
        - $ref: '#/components/parameters/gameObjectName'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransformKeyframes'
      responses:
        '200':
          $ref: '#/components/responses/plainSuccess'
        '400':
          $ref: '#/components/responses/invalidBody'
        '404':
          $ref: '#/components/responses/gameObjectNotFound'
        '503':
          description: Keyframes cannot be set at the moment
  /gameObjects/{name}/mesh:
    get:
      operationId: getGameObjectMesh
      tags: [gameObject]
      parameters:
        - $ref: '#/components/parameters/gameObjectName'
      responses:
        '200':
          description: Returned gameObject mesh
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameObjectMesh'
        '404':
          $ref: '#/components/responses/gameObjectNotFound'
  /player/ground-body:
    get:
      operationId: getPlayerGroundBody
      tags: [player]
      responses:
        '200':
          description: Returned player ground body
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    examples:
                      - TimberHearth_Body
                  transform:
                    $ref: '#/components/schemas/Transform'
        '503':
          description: Player ground body cannot be retrieved at the moment
  /player/sectors:
    get:
      operationId: getPlayerSectors
      tags: [player]
      responses:
        '200':
          description: Returned player sector list
          content:
            application/json:
              schema:
                type: object
                properties:
                  sectors:
                    type: array
                    description: List of sectors player has entered. Last item is the last sector that the player entered
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        id:
                          type: string
                        path:
                          type: string
                          description: A path to sector GameObject in scene hierarchy
  /player/warp:
    post:
      operationId: warpPlayer
      tags: [player]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required: [groundBody, transform]
              properties:
                groundBody:
                  type: string
                  description: Name of ground body to warp to
                  examples:
                    - TimberHearth_Body
                transform:
                  $ref: '#/components/schemas/Transform'
                  description: Transform local to ground body. Must include only position and rotation
      responses:
        '200':
          $ref: '#/components/responses/plainSuccess'
        '400':
          description: Invalid ground body or transform
        '503':
          description: The player cannot be warped at the moment
components:
  schemas:
    Vector2:
      description: Two numbers defining a vector in 2D space
      type: array
      items:
        type: number
      minItems: 2
      maxItems: 2
    Vector3:
      description: Three numbers defining a vector in 3D space
      type: array
      items:
        type: number
      minItems: 3
      maxItems: 3
    Quaternion:
      description: Four numbers defining a rotation in 3D space
      type: array
      items:
        type: number
      minItems: 4
      maxItems: 4
      examples:
        - [0, 0, 0, 1]
    Transform:
      description: Object transformation in 3D space
      type: object
      additionalProperties: false
      properties:
        parent:
          type: string
        position:
          $ref: '#/components/schemas/Vector3'
        rotation:
          $ref: '#/components/schemas/Quaternion'
        scale:
          $ref: '#/components/schemas/Vector3'
          examples:
            - [1, 1, 1]
    CameraPerspective:
      description: Properties of PerspectiveCamera
      type: object
      additionalProperties: false
      required: [focalLength, sensorSize, lensShift, nearClipPlane, farClipPlane]
      properties:
        focalLength:
          type: number
          minimum: 0.00001
          examples:
            - 40
        sensorSize:
          $ref: '#/components/schemas/Vector2'
          examples:
            - [36, 24]
        lensShift:
          $ref: '#/components/schemas/Vector2'
          examples:
            - [0, 0]
        nearClipPlane:
          type: number
          minimum: 0.00001
          examples:
            - 0.1
        farClipPlane:
          type: number
          minimum: 0.00001
          examples:
            - 5000
    CameraId:
      type: string
      pattern: ^[a-zA-Z_][a-zA-Z0-9_\-]*$
    CameraBase:
      description: Base properties of all cameras
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/CameraId'
          examples:
            - main
        transform:
          $ref: '#/components/schemas/Transform'
    PerspectiveCamera:
      description: Regular camera
      type: object
      allOf:
        - $ref: '#/components/schemas/CameraBase'
      additionalProperties: false
      required: [type, resolution, gateFit]
      properties:
        type:
          type: string
          enum: [perspective]
        resolution:
          type: object
          additionalProperties: false
          required: [width, height]
          properties:
            width:
              type: integer
              minimum: 1
            height:
              type: integer
              minimum: 1
        gateFit:
          type: string
          enum: [horizontal, vertical]
    EquirectangularCamera:
      description: Equirectangular camera used to record 360 color output (can be used for HDRI)
      type: object
      allOf:
        - $ref: '#/components/schemas/CameraBase'
      additionalProperties: false
      required: [type, faceResolution]
      properties:
        type:
          type: string
          enum: [equirectangular]
        faceResolution:
          type: integer
          minimum: 1
    Camera:
      description: Any supported camera
      type: object
      anyOf:
        - $ref: '#/components/schemas/PerspectiveCamera'
        - $ref: '#/components/schemas/EquirectangularCamera'
    GameObjectMesh:
      type: object
      additionalProperties: false
      required: [body, sectors]
      properties:
        body:
          type: object
          additionalProperties: false
          required: [name, path, transform]
          properties:
            name:
              type: string
            path:
              type: string
            transform:
              $ref: '#/components/schemas/Transform'
        sectors:
          type: array
          items:
            type: object
            additionalProperties: false
            required: [path, plainMeshes, streamedMeshes]
            properties:
              path:
                type: string
              plainMeshes:
                type: array
                items:
                  $ref: '#/components/schemas/MeshAsset'
              streamedMeshes:
                type: array
                items:
                  $ref: '#/components/schemas/MeshAsset'
    MeshAsset:
      type: object
      description: |-
        Object used to describe Mesh asset placed in the Unity scene. There are two types of assets: static and streamed
      additionalProperties: false
      required: [path, globalTransform, localTransform]
      properties:
        path:
          type: string
          description: |-
            Means differed thing based on mesh type

            If the mesh is static, it's a path to GameObject in a hierarchy

            If the mesh is streamed, it's a filesystem path to said mesh asset
        globalTransform:
          $ref: '#/components/schemas/Transform'
        localTransform:
          $ref: '#/components/schemas/Transform'
    KeyframeBase:
      description: Base properties of all keyframes
      type: object
    NumberKeyframes:
      type: object
      additionalProperties: false
      required: [keyframes]
      description: Set of keyframes of number property
      properties:
        keyframes:
          patternProperties:
            "^\\d+$":
              allOf:
                - $ref: '#/components/schemas/KeyframeBase'
                - type: object
                  required: [value]
                  properties:
                    value:
                      type: number
          examples:
            - 1:
                value: 1
              60:
                value: 2
    Vector2Keyframes:
      type: object
      additionalProperties: false
      required: [keyframes]
      description: Set of keyframes of Vector2 property
      properties:
        keyframes:
          patternProperties:
            "^\\d+$":
              allOf:
                - $ref: '#/components/schemas/KeyframeBase'
                - type: object
                  required: [value]
                  properties:
                    value:
                      $ref: '#/components/schemas/Vector2'
          examples:
            - 1:
                value: [36, 24]
              60:
                value: [72, 48]
    Vector3Keyframes:
      type: object
      additionalProperties: false
      required: [keyframes]
      description: Set of keyframes of Vector3 property
      properties:
        keyframes:
          patternProperties:
            "^\\d+$":
              allOf:
                - $ref: '#/components/schemas/KeyframeBase'
                - type: object
                  required: [value]
                  properties:
                    value:
                      $ref: '#/components/schemas/Vector3'
          examples:
            - 1:
                value: [-3, 0, 0]
              60:
                value: [3, 0, 0]
    QuaternionKeyframes:
      type: object
      additionalProperties: false
      required: [keyframes]
      description: Set of keyframes of Quaternion property
      properties:
        keyframes:
          patternProperties:
            "^\\d+$":
              allOf:
                - $ref: '#/components/schemas/KeyframeBase'
                - type: object
                  required: [value]
                  properties:
                    value:
                      $ref: '#/components/schemas/Quaternion'
          examples:
            - 1:
                value: [0, -0.26, 0, 0.97]
              60:
                value: [0, 0.26, 0, 0.97]
    TimeScaleKeyframes:
      type: object
      allOf:
        - type: object
          additionalProperties: false
          required: [type]
          properties:
            type:
              type: string
              enum: [time.scale]
        - $ref: '#/components/schemas/NumberKeyframes'
    SceneKeyframes:
      anyOf:
        - $ref: '#/components/schemas/TimeScaleKeyframes'
    PositionKeyframes:
      type: object
      allOf:
        - type: object
          additionalProperties: false
          required: [type]
          properties:
            type:
              type: string
              enum: [transform.position]
        - $ref: '#/components/schemas/Vector3Keyframes'
    RotationKeyframes:
      type: object
      allOf:
        - type: object
          additionalProperties: false
          required: [type]
          properties:
            type:
              type: string
              enum: [transform.rotation]
        - $ref: '#/components/schemas/QuaternionKeyframes'
    ScaleKeyframes:
      type: object
      allOf:
        - type: object
          additionalProperties: false
          required: [type]
          properties:
            type:
              type: string
              enum: [transform.scale]
        - $ref: '#/components/schemas/Vector3Keyframes'
    TransformKeyframes:
      description: "Set of keyframes for one of Transform components: transform.position, transform.rotation or transform.scale"
      anyOf:
        - $ref: '#/components/schemas/PositionKeyframes'
        - $ref: '#/components/schemas/RotationKeyframes'
        - $ref: '#/components/schemas/ScaleKeyframes'
    FocalLengthKeyframes:
      type: object
      allOf:
        - type: object
          additionalProperties: false
          required: [type]
          properties:
            type:
              type: string
              enum: [perspective.focalLength]
        - $ref: '#/components/schemas/NumberKeyframes'
    SensorSizeKeyframes:
      type: object
      allOf:
        - type: object
          additionalProperties: false
          required: [type]
          properties:
            type:
              type: string
              enum: [perspective.sensorSize]
        - $ref: '#/components/schemas/Vector2Keyframes'
    LensShiftKeyframes:
      type: object
      allOf:
        - type: object
          additionalProperties: false
          required: [type]
          properties:
            type:
              type: string
              enum: [perspective.lensShift]
        - $ref: '#/components/schemas/Vector2Keyframes'
    NearClipPlaneKeyframes:
      type: object
      allOf:
        - type: object
          additionalProperties: false
          required: [type]
          properties:
            type:
              type: string
              enum: [perspective.nearClipPlane]
        - $ref: '#/components/schemas/NumberKeyframes'
    FarClipPlaneKeyframes:
      type: object
      allOf:
        - type: object
          additionalProperties: false
          required: [type]
          properties:
            type:
              type: string
              enum: [perspective.farClipPlane]
        - $ref: '#/components/schemas/NumberKeyframes'
    PerspectiveKeyframes:
      description: "Set of keyframes for one of CameraPerspective components: perspective.focalLength, perspective.sensorSize, perspective.lensShift, perspective.nearClipPlane or perspective.farClipPlane"
      anyOf:
        - $ref: '#/components/schemas/FocalLengthKeyframes'
        - $ref: '#/components/schemas/SensorSizeKeyframes'
        - $ref: '#/components/schemas/LensShiftKeyframes'
        - $ref: '#/components/schemas/NearClipPlaneKeyframes'
        - $ref: '#/components/schemas/FarClipPlaneKeyframes'
  parameters:
    cameraId:
      name: id
      in: path
      required: true
      description: Id of a camera
      schema:
        $ref: '#/components/schemas/CameraId'
    gameObjectName:
      name: name
      in: path
      required: true
      description: Name of a Unity GameObject
      schema:
        type: string
  responses:
    plainSuccess:
      description: Successful operation
    invalidBody:
      description: Invalid request body
    cameraNotFound:
      description: Camera was not found
    gameObjectNotFound:
      description: GameObject was not found
