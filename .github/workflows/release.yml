name: Create Release Draft

on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  PROJ_USERNAME: picalines
  PROJ_NAME: OuterScout

jobs:
  read-manifest-version:
    name: Check For Other Releases
    outputs:
      version: ${{ steps.out.outputs.version }}
      exists: ${{ steps.out.outputs.exists }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: "actions/checkout@v4"

      - name: Read Manifest
        id: read-manifest
        run: echo "manifest=$(< ./${{ env.PROJ_NAME }}/manifest.json sed ':a;N;$!ba;s/\n/ /g')" >> $GITHUB_OUTPUT

      - name: Check For Release
        uses: mukunku/tag-exists-action@v1.0.0
        id: check-tag
        with:
          tag: "v${{fromJson(steps.read-manifest.outputs.manifest).version}}"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Output Version Info
        id: out
        run: |
          echo "version=${{fromJson(steps.read-manifest.outputs.manifest).version}}" >> $GITHUB_OUTPUT
          echo "exists=${{steps.check-tag.outputs.exists}}" >> $GITHUB_OUTPUT

  create-release-draft:
    needs: read-manifest-job
    if: ${{ (needs.read-manifest-job.outputs.version != '0.0.0') && (needs.read-manifest-job.outputs.exists == 'false') }}
    name: Create Release Draft
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: "actions/checkout@v4"

      - name: Setup .NET
        uses: "actions/setup-dotnet@v2"

      - name: Remove .csproj.user
        run: rm ${{ env.PROJ_NAME }}/${{ env.PROJ_NAME }}.csproj.user

      - name: Build Mod
        run: dotnet build -c Release

      - name: Upload Artifact
        uses: "actions/upload-artifact@v4"
        with:
          name: "${{ env.PROJ_USERNAME }}.${{ env.PROJ_NAME }}"
          path: "${{ env.PROJ_NAME }}/bin/Release"

      - name: Zip For Release
        run: 7z a ${{ env.PROJ_USERNAME }}.${{ env.PROJ_NAME }}.zip ${{ env.PROJ_NAME }}/bin/Release/**

      - name: Create Release
        uses: "ncipollo/release-action@v1"
        with:
          allowUpdates: true
          commit: master
          tag: v${{ needs.pre_job.outputs.version }}
          name: Version ${{ needs.pre_job.outputs.version }}
          omitBodyDuringUpdate: true
          artifacts: "${{ env.PROJ_USERNAME}}.${{ env.PROJ_NAME }}.zip"
          draft: true
          prerelease: false
          generateReleaseNotes: true
